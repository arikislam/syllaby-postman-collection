{
  "info": {
    "_postman_id": "syllaby-api-collection",
    "name": "Syllaby API Collection",
    "description": "Complete API collection for Syllaby - AI-powered video creation and social media management platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "// Set common headers",
          "pm.request.headers.add({",
          "    key: 'Accept',",
          "    value: '{{accept}}'",
          "});",
          "",
          "pm.request.headers.add({",
          "    key: 'Content-Type',",
          "    value: '{{content_type}}'",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "// Check response time",
          "pm.test(\"Response time is less than 1000ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test registration response",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "});",
                  "",
                  "// Save auth token if registration successful",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"auth_token\", jsonData.data.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{user_password}}\",\n    \"password_confirmation\": \"{{user_password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/authentication/register",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "authentication",
                "register"
              ]
            },
            "description": "Register a new user account"
          },
          "response": [
            {
              "name": "Success - User Registered",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"password_confirmation\": \"password123\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/authentication/register",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "authentication",
                    "register"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": 1,\n            \"name\": \"Test User\",\n            \"email\": \"test@example.com\",\n            \"created_at\": \"2025-01-18T00:00:00.000000Z\"\n        },\n        \"token\": \"1|laravel_sanctum_token_here\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Check Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test check email response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has exists field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('exists');",
                  "    pm.expect(typeof jsonData.exists).to.equal('boolean');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{user_email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/authentication/check-email",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "authentication",
                "check-email"
              ]
            },
            "description": "Check if email exists in the system"
          },
          "response": [
            {
              "name": "Success - Email Exists",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"test@example.com\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/authentication/check-email",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "authentication",
                    "check-email"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"exists\": true\n}"
            },
            {
              "name": "Success - Email Not Found",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"nonexistent@example.com\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/authentication/check-email",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "authentication",
                    "check-email"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"exists\": false\n}"
            }
          ]
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test login response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "});",
                  "",
                  "// Save auth token",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"auth_token\", jsonData.data.token);",
                  "    pm.environment.set(\"user_id\", jsonData.data.user.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// You can add any pre-request logic here",
                  "console.log(\"Attempting to login with email:\", pm.environment.get(\"user_email\"));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{user_password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/authentication/login",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "authentication",
                "login"
              ]
            },
            "description": "Login with email and password to get authentication token"
          },
          "response": [
            {
              "name": "Success - User Logged In",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/authentication/login",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "authentication",
                    "login"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": 1,\n            \"name\": \"Test User\",\n            \"email\": \"test@example.com\",\n            \"has_seen_welcome_message\": true,\n            \"created_at\": \"2025-01-18T00:00:00.000000Z\"\n        },\n        \"token\": \"1|laravel_sanctum_token_here\"\n    }\n}"
            },
            {
              "name": "Error - Invalid Credentials",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"wrongpassword\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/authentication/login",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "authentication",
                    "login"
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"The provided credentials are incorrect.\"\n}"
            }
          ]
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test logout response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "// Clear auth token on successful logout",
                  "if (pm.response.code === 200) {",
                  "    pm.environment.unset('auth_token');",
                  "    pm.environment.unset('user_id');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/authentication/logout",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "authentication",
                "logout"
              ]
            },
            "description": "Logout user and invalidate authentication token"
          },
          "response": [
            {
              "name": "Success - User Logged Out",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/authentication/logout",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "authentication",
                    "logout"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Successfully logged out\"\n}"
            }
          ]
        },
        {
          "name": "Social Redirect",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test social redirect response",
                  "pm.test(\"Status code is 302 or 200\", function () {",
                  "    pm.expect([200, 302]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has redirect URL\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('redirect_url');",
                  "        pm.expect(jsonData.redirect_url).to.be.a('string');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/authentication/redirect/{{provider}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "authentication",
                "redirect",
                "{{provider}}"
              ]
            },
            "description": "Get social provider redirect URL (provider: google, facebook, twitter, etc.)"
          },
          "response": [
            {
              "name": "Success - Redirect URL",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/authentication/redirect/google",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "authentication",
                    "redirect",
                    "google"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"redirect_url\": \"https://accounts.google.com/oauth/authorize?client_id=...&redirect_uri=...\"\n}"
            }
          ]
        },
        {
          "name": "Social Callback",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test social callback response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "});",
                  "",
                  "// Save auth token",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('auth_token', jsonData.data.token);",
                  "    pm.environment.set('user_id', jsonData.data.user.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/authentication/callback/{{provider}}?code={{auth_code}}&state={{auth_state}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "authentication",
                "callback",
                "{{provider}}"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "{{auth_code}}"
                },
                {
                  "key": "state",
                  "value": "{{auth_state}}"
                }
              ]
            },
            "description": "Handle social provider callback and authenticate user"
          },
          "response": [
            {
              "name": "Success - User Authenticated",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/authentication/callback/google?code=auth_code_here&state=state_here",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "authentication",
                    "callback",
                    "google"
                  ],
                  "query": [
                    {
                      "key": "code",
                      "value": "auth_code_here"
                    },
                    {
                      "key": "state",
                      "value": "state_here"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": {\n        \"user\": {\n            \"id\": 1,\n            \"name\": \"John Doe\",\n            \"email\": \"john@example.com\",\n            \"provider\": \"google\",\n            \"provider_id\": \"google_user_id\",\n            \"created_at\": \"2025-01-18T00:00:00.000000Z\"\n        },\n        \"token\": \"1|laravel_sanctum_token_here\"\n    }\n}"
            }
          ]
        }
      ],
      "description": "Authentication endpoints for user registration, login, logout, and social authentication"
    },
    {
      "name": "Recovery",
      "item": [
        {
          "name": "Forgot Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test forgot password response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{user_email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/recovery/forgot",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "recovery",
                "forgot"
              ]
            },
            "description": "Send password reset email to user"
          },
          "response": [
            {
              "name": "Success - Password Reset Email Sent",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"test@example.com\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/recovery/forgot",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "recovery",
                    "forgot"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Password reset email sent successfully\"\n}"
            },
            {
              "name": "Error - Email Not Found",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"nonexistent@example.com\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/recovery/forgot",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "recovery",
                    "forgot"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Email address not found\"\n}"
            }
          ]
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test reset password response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"token\": \"{{reset_token}}\",\n    \"email\": \"{{user_email}}\",\n    \"password\": \"{{new_password}}\",\n    \"password_confirmation\": \"{{new_password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/recovery/reset",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "recovery",
                "reset"
              ]
            },
            "description": "Reset user password using reset token"
          },
          "response": [
            {
              "name": "Success - Password Reset",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"token\": \"reset_token_here\",\n    \"email\": \"test@example.com\",\n    \"password\": \"newpassword123\",\n    \"password_confirmation\": \"newpassword123\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/recovery/reset",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "recovery",
                    "reset"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Password reset successfully\"\n}"
            },
            {
              "name": "Error - Invalid Token",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"token\": \"invalid_token\",\n    \"email\": \"test@example.com\",\n    \"password\": \"newpassword123\",\n    \"password_confirmation\": \"newpassword123\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/recovery/reset",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "recovery",
                    "reset"
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Invalid or expired reset token\"\n}"
            }
          ]
        }
      ],
      "description": "Password recovery endpoints for forgot password and reset password functionality"
    },
    {
      "name": "Notifications",
      "item": [
        {
          "name": "Get Notifications",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test get notifications response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",  
            "header": [],
            "url": {
              "raw": "{{api_url}}/notifications",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "notifications"
              ]
            },
            "description": "Get user notifications"
          },
          "response": [
            {
              "name": "Success - Notifications Retrieved",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{api_url}}/notifications",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "notifications"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"type\": \"video_completed\",\n            \"title\": \"Video Generation Complete\",\n            \"message\": \"Your video 'Technology Trends' has been generated successfully\",\n            \"read_at\": null,\n            \"created_at\": \"2025-01-18T10:00:00.000000Z\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"credit_low\",\n            \"title\": \"Credits Running Low\",\n            \"message\": \"You have 5 credits remaining\",\n            \"read_at\": \"2025-01-18T11:00:00.000000Z\",\n            \"created_at\": \"2025-01-18T09:00:00.000000Z\"\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "Update Notifications",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test update notifications response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification_ids\": [1, 2, 3],\n    \"action\": \"mark_read\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/notifications",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "notifications"
              ]
            },
            "description": "Update notifications (mark as read/unread, delete, etc.)"
          },
          "response": [
            {
              "name": "Success - Notifications Updated",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification_ids\": [1, 2],\n    \"action\": \"mark_read\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/notifications",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "notifications"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Notifications updated successfully\"\n}"
            }
          ]
        },
        {
          "name": "Update Notification Settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test update notification settings response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email_notifications\": true,\n    \"push_notifications\": false,\n    \"video_completion\": true,\n    \"credit_alerts\": true,\n    \"marketing_emails\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/notifications/settings",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "notifications",
                "settings"
              ]
            },
            "description": "Update user notification preferences"
          },
          "response": [
            {
              "name": "Success - Settings Updated",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email_notifications\": true,\n    \"push_notifications\": false,\n    \"video_completion\": true,\n    \"credit_alerts\": true,\n    \"marketing_emails\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/notifications/settings",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "notifications",
                    "settings"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Notification settings updated successfully\"\n}"
            }
          ]
        }
      ],
      "description": "User notification management endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Credits",
      "item": [
        {
          "name": "Get Credit Overview",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test credit overview response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has credit data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('total');",
                  "    pm.expect(jsonData.data).to.have.property('remaining');",
                  "    pm.expect(jsonData.data).to.have.property('used');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/credits/overview",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "credits",
                "overview"
              ]
            },
            "description": "Get user credit overview and usage statistics"
          },
          "response": [
            {
              "name": "Success - Credit Overview",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{api_url}}/credits/overview",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "credits",
                    "overview"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": {\n        \"total\": 100,\n        \"remaining\": 75,\n        \"used\": 25,\n        \"usage_history\": [\n            {\n                \"date\": \"2025-01-18\",\n                \"credits_used\": 5,\n                \"action\": \"video_generation\",\n                \"description\": \"Created faceless video\"\n            },\n            {\n                \"date\": \"2025-01-17\",\n                \"credits_used\": 3,\n                \"action\": \"script_generation\",\n                \"description\": \"Generated video script\"\n            }\n        ],\n        \"next_reset\": \"2025-02-01T00:00:00.000000Z\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Estimate Credit Cost",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test credit estimation response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has estimation data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('estimated_cost');",
                  "    pm.expect(jsonData.data).to.have.property('breakdown');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"video_generation\",\n    \"parameters\": {\n        \"duration\": 60,\n        \"quality\": \"1080p\",\n        \"with_voice\": true,\n        \"with_captions\": true\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/credits/estimate",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "credits",
                "estimate"
              ]
            },
            "description": "Estimate credit cost for a specific action"
          },
          "response": [
            {
              "name": "Success - Cost Estimated",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"action\": \"video_generation\",\n    \"parameters\": {\n        \"duration\": 60,\n        \"quality\": \"1080p\",\n        \"with_voice\": true,\n        \"with_captions\": true\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/credits/estimate",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "credits",
                    "estimate"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": {\n        \"estimated_cost\": 8,\n        \"breakdown\": {\n            \"base_video_generation\": 5,\n            \"voice_synthesis\": 2,\n            \"caption_generation\": 1\n        },\n        \"sufficient_credits\": true,\n        \"remaining_after\": 67\n    }\n}"
            }
          ]
        }
      ],
      "description": "Credit management and estimation endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Surveys",
      "item": [
        {
          "name": "Get User Experience Surveys",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test get surveys response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/surveys",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "surveys"
              ]
            },
            "description": "Get available user experience surveys"
          },
          "response": [
            {
              "name": "Success - Surveys Retrieved",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{api_url}}/surveys",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "surveys"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"title\": \"Video Creation Experience\",\n            \"description\": \"Help us improve your video creation experience\",\n            \"questions\": [\n                {\n                    \"id\": 1,\n                    \"question\": \"How satisfied are you with the video quality?\",\n                    \"type\": \"scale\",\n                    \"scale\": \"1-5\"\n                },\n                {\n                    \"id\": 2,\n                    \"question\": \"What features would you like to see added?\",\n                    \"type\": \"text\"\n                }\n            ],\n            \"active\": true\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "Submit Survey Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test submit survey response",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"survey_id\": 1,\n    \"responses\": [\n        {\n            \"question_id\": 1,\n            \"answer\": \"4\"\n        },\n        {\n            \"question_id\": 2,\n            \"answer\": \"More template options and better audio quality\"\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/surveys",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "surveys"
              ]
            },
            "description": "Submit user experience survey response"
          },
          "response": [
            {
              "name": "Success - Survey Submitted",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"survey_id\": 1,\n    \"responses\": [\n        {\n            \"question_id\": 1,\n            \"answer\": \"4\"\n        },\n        {\n            \"question_id\": 2,\n            \"answer\": \"More template options and better audio quality\"\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/surveys",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "surveys"
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Survey response submitted successfully\"\n}"
            }
          ]
        },
        {
          "name": "Get Industries",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test get industries response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/surveys/industries",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "surveys",
                "industries"
              ]
            },
            "description": "Get available industries for survey categorization"
          },
          "response": [
            {
              "name": "Success - Industries Retrieved",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/surveys/industries",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "surveys",
                    "industries"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Technology\",\n            \"slug\": \"technology\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Marketing\",\n            \"slug\": \"marketing\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Education\",\n            \"slug\": \"education\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Healthcare\",\n            \"slug\": \"healthcare\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"Entertainment\",\n            \"slug\": \"entertainment\"\n        }\n    ]\n}"
            }
          ]
        }
      ],
      "description": "User experience surveys and industry information endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "User",
      "item": [
        {
          "name": "Get Current User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test user profile response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('email');",
                  "    pm.expect(jsonData.data).to.have.property('name');",
                  "});",
                  "",
                  "// Verify authorization header is present",
                  "pm.test(\"Request has authorization header\", function () {",
                  "    pm.expect(pm.request.headers.has('Authorization')).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/user/me",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "user",
                "me"
              ]
            },
            "description": "Get the authenticated user's profile information. Requires authentication token."
          },
          "response": [
            {
              "name": "Success - User Profile",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{api_url}}/user/me",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "user",
                    "me"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"Test User\",\n        \"email\": \"test@example.com\",\n        \"has_seen_welcome_message\": true,\n        \"subscription\": {\n            \"plan\": \"basic\",\n            \"status\": \"active\",\n            \"credits_remaining\": 100,\n            \"credits_total\": 100\n        },\n        \"storage\": {\n            \"used\": 1024000,\n            \"total\": 5368709120\n        },\n        \"created_at\": \"2025-01-18T00:00:00.000000Z\",\n        \"updated_at\": \"2025-01-18T00:00:00.000000Z\"\n    }\n}"
            },
            {
              "name": "Error - Unauthenticated",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/user/me",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "user",
                    "me"
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Unauthenticated.\"\n}"
            }
          ]
        },
        {
          "name": "Update Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test password update response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"current_password\": \"{{current_password}}\",\n    \"password\": \"{{new_password}}\",\n    \"password_confirmation\": \"{{new_password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/user/password",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "user",
                "password"
              ]
            },
            "description": "Update user password"
          }
        },
        {
          "name": "Update Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test profile update response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Name\",\n    \"email\": \"updated@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/user/profile",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "user",
                "profile"
              ]
            },
            "description": "Update user profile information"
          }
        },
        {
          "name": "Mark Welcome Message as Seen",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test welcome message update response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/user/seen-welcome-message",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "user",
                "seen-welcome-message"
              ]
            },
            "description": "Mark welcome message as seen for the user"
          }
        },
        {
          "name": "Get Credit History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test credit history response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has credit history data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/user/credit-history",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "user",
                "credit-history"
              ]
            },
            "description": "Get user's credit usage history"
          }
        },
        {
          "name": "Get Storage Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test storage info response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has storage data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('used');",
                  "    pm.expect(jsonData.data).to.have.property('total');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/user/storage",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "user",
                "storage"
              ]
            },
            "description": "Get user storage usage information"
          }
        },
        {
          "name": "Get Publications Usage",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test publications usage response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has publications usage data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/user/publications-usage",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "user",
                "publications-usage"
              ]
            },
            "description": "Get user publications usage statistics"
          }
        },
        {
          "name": "Delete User Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test account deletion response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/user",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "user"
              ]
            },
            "description": "Delete user account permanently"
          }
        }
      ],
      "description": "User management endpoints including profile, password, credit history, and storage",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Assets",
      "item": [
        {
          "name": "Get Assets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test get assets response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has assets data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/assets",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "assets"
              ]
            },
            "description": "Get user's assets"
          }
        },
        {
          "name": "Sort Assets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test sort assets response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"asset_ids\": [1, 2, 3, 4],\n    \"sort_order\": \"asc\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/assets/sort",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "assets",
                "sort"
              ]
            },
            "description": "Sort user's assets"
          }
        },
        {
          "name": "Get Audio Assets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test get audio assets response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has audio assets data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/assets/audios",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "assets",
                "audios"
              ]
            },
            "description": "Get user's audio assets"
          }
        },
        {
          "name": "Upload Audio Asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test upload audio response",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has asset data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "});",
                  "",
                  "// Save asset ID for other requests",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"asset_id\", jsonData.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "audio",
                  "type": "file",
                  "src": "",
                  "description": "Audio file to upload"
                },
                {
                  "key": "name",
                  "value": "My Audio Asset",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{api_url}}/assets/audios",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "assets",
                "audios"
              ]
            },
            "description": "Upload audio asset"
          }
        },
        {
          "name": "Add Watermark",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test watermark response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has watermarked asset data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"asset_id\": \"{{asset_id}}\",\n    \"watermark_text\": \"Syllaby\",\n    \"position\": \"bottom-right\",\n    \"opacity\": 0.7\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/assets/watermark",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "assets",
                "watermark"
              ]
            },
            "description": "Add watermark to asset"
          }
        },
        {
          "name": "Delete Asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test delete asset response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{api_url}}/assets/{{asset_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "assets",
                "{{asset_id}}"
              ]
            },
            "description": "Delete a specific asset"
          }
        },
        {
          "name": "Toggle Asset Bookmark",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test bookmark toggle response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has bookmark status\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('bookmarked');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/assets/{{asset_id}}/bookmark/toggle",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "assets",
                "{{asset_id}}",
                "bookmark",
                "toggle"
              ]
            },
            "description": "Toggle bookmark status for an asset"
          }
        }
      ],
      "description": "Asset management endpoints for uploads, sorting, bookmarking, and deletion",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Editor",
      "item": [
        {
          "name": "Get Editor Assets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test get editor assets response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has editor assets data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/editor/assets",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "editor",
                "assets"
              ]
            },
            "description": "Get assets available for the editor"
          }
        }
      ],
      "description": "Editor-specific endpoints for asset management",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Folders",
      "item": [
        {
          "name": "Get Folders",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test get folders response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has folders data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/folders",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "folders"
              ]
            },
            "description": "Get user's folders"
          }
        },
        {
          "name": "Create Folder",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test create folder response",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has folder data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "});",
                  "",
                  "// Save folder ID for other requests",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"folder_id\", jsonData.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"My New Folder\",\n    \"description\": \"Folder for organizing my content\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/folders",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "folders"
              ]
            },
            "description": "Create a new folder"
          }
        },
        {
          "name": "Update Folder",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test update folder response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated folder data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Folder Name\",\n    \"description\": \"Updated folder description\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/folders/{{folder_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "folders",
                "{{folder_id}}"
              ]
            },
            "description": "Update a specific folder"
          }
        },
        {
          "name": "Toggle Folder Bookmark",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test folder bookmark toggle response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has bookmark status\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('bookmarked');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/folders/{{folder_id}}/bookmark",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "folders",
                "{{folder_id}}",
                "bookmark"
              ]
            },
            "description": "Toggle bookmark status for a folder"
          }
        },
        {
          "name": "Get Folder Resources",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test get folder resources response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has resources data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/folders/resources",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "folders",
                "resources"
              ]
            },
            "description": "Get resources within folders"
          }
        },
        {
          "name": "Move Resources",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test move resources response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"resource_ids\": [1, 2, 3],\n    \"resource_type\": \"video\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/folders/resources/{{destination_folder_id}}/move",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "folders",
                "resources",
                "{{destination_folder_id}}",
                "move"
              ]
            },
            "description": "Move resources to a destination folder"
          }
        },
        {
          "name": "Delete Resources",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test delete resources response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"resource_ids\": [1, 2, 3],\n    \"resource_type\": \"video\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/folders/resources",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "folders",
                "resources"
              ]
            },
            "description": "Delete resources from folders"
          }
        }
      ],
      "description": "Folder management endpoints for organizing content",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Videos - Faceless",
      "item": [
        {
          "name": "Create Faceless Video",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has faceless video data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "});",
                  "",
                  "// Save faceless ID for other requests",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set(\"faceless_id\", jsonData.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"My Faceless Video\",\n    \"topic\": \"Technology trends in 2024\",\n    \"duration\": 60,\n    \"voice_id\": \"voice_123\",\n    \"genre\": \"educational\",\n    \"style\": \"professional\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/videos/faceless",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "videos",
                "faceless"
              ]
            },
            "description": "Create a new faceless video"
          }
        },
        {
          "name": "Get Faceless Video",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/videos/faceless/{{faceless_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "videos",
                "faceless",
                "{{faceless_id}}"
              ]
            },
            "description": "Get details of a specific faceless video"
          }
        },
        {
          "name": "Update Faceless Video",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Updated Faceless Video Title\",\n    \"topic\": \"Updated topic\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/videos/faceless/{{faceless_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "videos",
                "faceless",
                "{{faceless_id}}"
              ]
            },
            "description": "Update faceless video details"
          }
        },
        {
          "name": "Render Faceless Video",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"quality\": \"1080p\",\n    \"format\": \"mp4\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/render",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "videos",
                "faceless",
                "{{faceless_id}}",
                "render"
              ]
            },
            "description": "Start rendering the faceless video"
          }
        },
        {
          "name": "Retry Faceless Video",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/retry",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "videos",
                "faceless",
                "{{faceless_id}}",
                "retry"
              ]
            },
            "description": "Retry failed faceless video generation"
          }
        },
        {
          "name": "Generate/Update Scripts",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"script\": \"This is the updated script content for the video...\",\n    \"regenerate\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/scripts",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "videos",
                "faceless",
                "{{faceless_id}}",
                "scripts"
              ]
            },
            "description": "Generate or update video scripts"
          }
        },
        {
          "name": "Convert Faceless Video",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"format\": \"mp4\",\n    \"resolution\": \"720p\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/convert",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "videos",
                "faceless",
                "{{faceless_id}}",
                "convert"
              ]
            },
            "description": "Convert faceless video to different format"
          }
        },
        {
          "name": "Assets",
          "item": [
            {
              "name": "Get Faceless Assets",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/assets",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "assets"
                  ]
                },
                "description": "Get all assets for a faceless video"
              }
            },
            {
              "name": "Update Faceless Assets",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"assets\": [\n        {\n            \"id\": \"asset_123\",\n            \"order\": 1,\n            \"duration\": 5\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/assets",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "assets"
                  ]
                },
                "description": "Update assets for a faceless video"
              }
            },
            {
              "name": "Get Single Asset",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/assets/{{asset_id}}",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "assets",
                    "{{asset_id}}"
                  ]
                },
                "description": "Get details of a specific asset"
              }
            }
          ]
        },
        {
          "name": "Media",
          "item": [
            {
              "name": "Upload Media",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "",
                      "description": "Media file to upload"
                    },
                    {
                      "key": "type",
                      "value": "image",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/media/upload",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "media",
                    "upload"
                  ]
                },
                "description": "Upload media files for faceless video"
              }
            },
            {
              "name": "Transload Media",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"url\": \"https://example.com/media/video.mp4\",\n    \"type\": \"video\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/media/transload",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "media",
                    "transload"
                  ]
                },
                "description": "Transfer media from URL"
              }
            },
            {
              "name": "Generate Media",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"type\": \"thumbnail\",\n    \"prompt\": \"Generate a thumbnail for technology video\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/media/generate",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "media",
                    "generate"
                  ]
                },
                "description": "Generate media using AI"
              }
            },
            {
              "name": "Get Animation",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/media/animation",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "media",
                    "animation"
                  ]
                },
                "description": "Get animation settings"
              }
            },
            {
              "name": "Create Animation",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"type\": \"zoom\",\n    \"duration\": 3,\n    \"easing\": \"ease-in-out\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/media/animation",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "media",
                    "animation"
                  ]
                },
                "description": "Create animation for media"
              }
            }
          ]
        },
        {
          "name": "Export Faceless Video",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"format\": \"mp4\",\n    \"quality\": \"high\",\n    \"include_watermark\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/export",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "videos",
                "faceless",
                "{{faceless_id}}",
                "export"
              ]
            },
            "description": "Export the final faceless video"
          }
        },
        {
          "name": "Transcriptions",
          "item": [
            {
              "name": "Upload Audio for Transcription",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "audio",
                      "type": "file",
                      "src": "",
                      "description": "Audio file to transcribe"
                    }
                  ]
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/transcriptions/upload",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "transcriptions",
                    "upload"
                  ]
                },
                "description": "Upload audio file for transcription"
              }
            },
            {
              "name": "Create Transcription",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"language\": \"en\",\n    \"model\": \"whisper-large\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/transcriptions",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "transcriptions"
                  ]
                },
                "description": "Create transcription from audio"
              }
            }
          ]
        },
        {
          "name": "Scraping",
          "item": [
            {
              "name": "Scrape Content",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"url\": \"https://example.com/article\",\n    \"extract\": [\"title\", \"content\", \"images\"]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/scrape",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "scrape"
                  ]
                },
                "description": "Scrape content from URL"
              }
            },
            {
              "name": "Scrape Images",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"url\": \"https://example.com/gallery\",\n    \"limit\": 10,\n    \"quality\": \"high\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/scrape/images",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "scrape",
                    "images"
                  ]
                },
                "description": "Scrape images from URL"
              }
            },
            {
              "name": "Scrape Media",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test scrape media response",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has faceless data with assets\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('assets');",
                      "});",
                      "",
                      "// Find and save first video asset ID for download testing",
                      "if (pm.response.code === 200) {",
                      "    const jsonData = pm.response.json();",
                      "    const videoAsset = jsonData.data.assets.find(asset => asset.is_video === true);",
                      "    if (videoAsset) {",
                      "        pm.environment.set(\"video_asset_id\", videoAsset.id);",
                      "        console.log(\"Found video asset ID:\", videoAsset.id);",
                      "    }",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"url\": \"https://example.com/article-with-media\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/scrape/media",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "scrape",
                    "media"
                  ]
                },
                "description": "Extract media (images and videos) from a URL and associate them with the faceless video"
              }
            },
            {
              "name": "Download Video Asset",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test download video response",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has video asset data\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('download_status');",
                      "    pm.expect(jsonData.data).to.have.property('is_video');",
                      "    pm.expect(jsonData.data).to.have.property('thumbnail');",
                      "});",
                      "",
                      "// Check if download started",
                      "pm.test(\"Download status is not pending\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.data.download_status).to.not.equal('pending');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// Note: video_asset_id should be set from a previous scrape media request",
                      "// or you can manually set it to a video asset ID",
                      "if (!pm.environment.get('video_asset_id')) {",
                      "    console.log('Warning: video_asset_id not set. Please run Scrape Media first or set manually.');",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{api_url}}/videos/faceless/{{faceless_id}}/assets/{{video_asset_id}}/download",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "{{faceless_id}}",
                    "assets",
                    "{{video_asset_id}}",
                    "download"
                  ]
                },
                "description": "Download a video asset that was previously scraped. The asset must be a video type with pending download status."
              },
              "response": [
                {
                  "name": "Success - Download Started",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{api_url}}/videos/faceless/123/assets/29201/download",
                      "host": [
                        "{{api_url}}"
                      ],
                      "path": [
                        "videos",
                        "faceless",
                        "123",
                        "assets",
                        "29201",
                        "download"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"data\": {\n        \"id\": 29201,\n        \"name\": \"Video Asset\",\n        \"type\": \"scraped\",\n        \"status\": \"success\",\n        \"download_status\": \"downloading\",\n        \"download_url\": \"https://example.com/video.mp4\",\n        \"download_started_at\": \"2025-01-18T12:00:00.000000Z\",\n        \"is_video\": true,\n        \"thumbnail\": {\n            \"asset_id\": 29193,\n            \"url\": \"https://cdn.example.com/thumbnail.jpg\"\n        },\n        \"video\": null,\n        \"created_at\": \"2025-01-18T11:00:00.000000Z\",\n        \"updated_at\": \"2025-01-18T12:00:00.000000Z\"\n    }\n}"
                }
              ]
            }
          ]
        },
        {
          "name": "Options",
          "item": [
            {
              "name": "Get Fonts",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/videos/faceless/options/fonts",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "options",
                    "fonts"
                  ]
                },
                "description": "Get available fonts for faceless videos"
              }
            },
            {
              "name": "Get Facts",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/videos/faceless/options/facts",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "options",
                    "facts"
                  ]
                },
                "description": "Get available facts/themes"
              }
            },
            {
              "name": "Get Genres",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/videos/faceless/options/genres",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "options",
                    "genres"
                  ]
                },
                "description": "Get available video genres"
              }
            },
            {
              "name": "Get Transitions",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/videos/faceless/options/transitions",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "options",
                    "transitions"
                  ]
                },
                "description": "Get available transitions"
              }
            },
            {
              "name": "Get Backgrounds",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/videos/faceless/options/backgrounds",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "options",
                    "backgrounds"
                  ]
                },
                "description": "Get available backgrounds"
              }
            },
            {
              "name": "Get Caption Effects",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/videos/faceless/options/caption/effects",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "options",
                    "caption",
                    "effects"
                  ]
                },
                "description": "Get available caption effects"
              }
            },
            {
              "name": "Get Overlays",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{api_url}}/videos/faceless/options/overlays",
                  "host": [
                    "{{api_url}}"
                  ],
                  "path": [
                    "videos",
                    "faceless",
                    "options",
                    "overlays"
                  ]
                },
                "description": "Get available overlays"
              }
            }
          ]
        }
      ],
      "description": "Faceless video creation and management endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "Get Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/events",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "events"
              ]
            },
            "description": "Get all events"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has events array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Event\",\n  \"description\": \"Test event description\",\n  \"date\": \"2025-01-25\",\n  \"time\": \"10:00:00\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/events",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "events"
              ]
            },
            "description": "Create a new event"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has event data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.environment.set('event_id', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Event",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/events/{{event_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "events",
                "{{event_id}}"
              ]
            },
            "description": "Get specific event by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has event data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Event",
          "request": {
            "method": "PUT",  
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Event\",\n  \"description\": \"Updated event description\",\n  \"date\": \"2025-01-26\",\n  \"time\": \"11:00:00\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/events/{{event_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "events",
                "{{event_id}}"
              ]
            },
            "description": "Update an existing event"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated event data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Event",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{api_url}}/events/{{event_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "events",
                "{{event_id}}"
              ]
            },
            "description": "Delete an event"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Event management endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Generators",
      "item": [
        {
          "name": "Get Generators",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/generators",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "generators"
              ]
            },
            "description": "Get all available generators"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has generators array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Generator",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/generators/{{generator_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "generators",
                "{{generator_id}}"
              ]
            },
            "description": "Get specific generator by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has generator data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Generate Content",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"generator_id\": \"{{generator_id}}\",\n  \"prompt\": \"Generate content about AI technology\",\n  \"parameters\": {\n    \"length\": \"medium\",\n    \"tone\": \"professional\"\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/generators/generate",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "generators",
                "generate"
              ]
            },
            "description": "Generate content using a specific generator"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has generated content\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('content');",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Content generator endpoints",
      "auth": {
        "type": "bearer",  
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Schedulers",
      "item": [
        {
          "name": "Get Schedulers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/schedulers",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "schedulers"
              ]
            },
            "description": "Get all schedulers"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has schedulers array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Scheduler",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Daily Content Schedule\",\n  \"description\": \"Schedule for daily content posting\",\n  \"schedule\": \"0 9 * * *\",\n  \"active\": true\n}"
            },
            "url": {
              "raw": "{{api_url}}/schedulers",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "schedulers"
              ]
            },
            "description": "Create a new scheduler"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has scheduler data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.environment.set('scheduler_id', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Scheduler",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/schedulers/{{scheduler_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "schedulers",
                "{{scheduler_id}}"
              ]
            },
            "description": "Get specific scheduler by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has scheduler data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Scheduler",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Daily Content Schedule\",\n  \"description\": \"Updated schedule for daily content posting\",\n  \"schedule\": \"0 10 * * *\",\n  \"active\": true\n}"
            },
            "url": {
              "raw": "{{api_url}}/schedulers/{{scheduler_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "schedulers",
                "{{scheduler_id}}"
              ]
            },
            "description": "Update an existing scheduler"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated scheduler data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Scheduler",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{api_url}}/schedulers/{{scheduler_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "schedulers",
                "{{scheduler_id}}"
              ]
            },
            "description": "Delete a scheduler"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Scheduler management endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Publications",
      "item": [
        {
          "name": "Get Publications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/publications",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "publications"
              ]
            },
            "description": "Get all publications"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has publications array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Publication",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"New Publication\",\n  \"content\": \"Publication content here\",\n  \"platform\": \"instagram\",\n  \"scheduled_at\": \"2025-01-25T10:00:00Z\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/publications",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "publications"
              ]
            },
            "description": "Create a new publication"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has publication data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.environment.set('publication_id', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Publication",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/publications/{{publication_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "publications",
                "{{publication_id}}"
              ]
            },
            "description": "Get specific publication by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has publication data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Publication",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Publication\",\n  \"content\": \"Updated publication content\",\n  \"platform\": \"instagram\",\n  \"scheduled_at\": \"2025-01-26T10:00:00Z\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/publications/{{publication_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "publications",
                "{{publication_id}}"
              ]
            },
            "description": "Update an existing publication"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated publication data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Publication",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{api_url}}/publications/{{publication_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "publications",
                "{{publication_id}}"
              ]
            },
            "description": "Delete a publication"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Publish Now",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"publication_id\": \"{{publication_id}}\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/publications/{{publication_id}}/publish",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "publications",
                "{{publication_id}}",
                "publish"
              ]
            },
            "description": "Publish a publication immediately"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has publish status\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('status');",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Publication management and publishing endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Keywords",
      "item": [
        {
          "name": "Get Keyword History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/keywords/history",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "keywords",
                "history"
              ]
            },
            "description": "Get keyword search history"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has keyword history\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Keyword History",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{api_url}}/keywords/{{keyword}}/history",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "keywords",
                "{{keyword}}",
                "history"
              ]
            },
            "description": "Delete specific keyword from history"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Keyword history management endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Ideas",
      "item": [
        {
          "name": "Get Ideas",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/ideas",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "ideas"
              ]
            },
            "description": "Get all ideas"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has ideas array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Discover Ideas",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"keyword\": \"artificial intelligence\",\n  \"category\": \"technology\",\n  \"limit\": 10\n}"
            },
            "url": {
              "raw": "{{api_url}}/ideas/discover",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "ideas",
                "discover"
              ]
            },
            "description": "Discover new ideas based on keywords"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has discovered ideas\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Idea Suggestions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/ideas/suggestions",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "ideas",
                "suggestions"
              ]
            },
            "description": "Get suggested ideas"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has suggestions\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Idea discovery and suggestion endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Topics",
      "item": [
        {
          "name": "Get Topics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/topics",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "topics"
              ]
            },
            "description": "Get all topics"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has topics array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Related Topics",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"machine learning\",\n  \"count\": 5\n}"
            },
            "url": {
              "raw": "{{api_url}}/topics/related",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "topics",
                "related"
              ]
            },
            "description": "Generate related topics"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has related topics\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Bookmark Topic",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bookmarked\": true\n}"
            },
            "url": {
              "raw": "{{api_url}}/topics/{{topic_id}}/bookmark",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "topics",
                "{{topic_id}}",
                "bookmark"
              ]
            },
            "description": "Bookmark or unbookmark a topic"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has bookmark status\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('bookmarked');",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Topic management and related topic generation endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Templates",
      "item": [
        {
          "name": "Get Templates",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/templates",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "templates"
              ]
            },
            "description": "Get all templates"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has templates array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Template",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/templates/{{template_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "templates",
                "{{template_id}}"
              ]
            },
            "description": "Get specific template by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has template data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Template management endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Tags",
      "item": [
        {
          "name": "Get Tags",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/tags",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "tags"
              ]
            },
            "description": "Get all tags"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has tags array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Tag",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/tags/{{tag_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "tags",
                "{{tag_id}}"
              ]
            },
            "description": "Get specific tag by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has tag data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Tag management endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Presets",
      "item": [
        {
          "name": "Get Faceless Presets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/presets/faceless",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "presets",
                "faceless"
              ]
            },
            "description": "Get all faceless video presets"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has presets array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Faceless Preset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"My Custom Preset\",\n  \"description\": \"Custom preset for tech videos\",\n  \"settings\": {\n    \"voice\": \"professional\",\n    \"background\": \"tech\",\n    \"duration\": 60\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/presets/faceless",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "presets",
                "faceless"
              ]
            },
            "description": "Create a new faceless video preset"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has preset data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.environment.set('preset_id', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Faceless Preset",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Custom Preset\",\n  \"description\": \"Updated preset description\",\n  \"settings\": {\n    \"voice\": \"casual\",\n    \"background\": \"nature\",\n    \"duration\": 90\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/presets/faceless/{{preset_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "presets",
                "faceless",
                "{{preset_id}}"
              ]
            },
            "description": "Update an existing faceless preset"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated preset data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Faceless Preset",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{api_url}}/presets/faceless/{{preset_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "presets",
                "faceless",
                "{{preset_id}}"
              ]
            },
            "description": "Delete a faceless preset"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Preset management endpoints for faceless videos",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Characters",
      "item": [
        {
          "name": "Get Characters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/characters",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "characters"
              ]
            },
            "description": "Get all characters"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has characters array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Character",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John AI\",\n  \"description\": \"Professional AI character for business videos\",\n  \"voice_settings\": {\n    \"tone\": \"professional\",\n    \"speed\": \"normal\"\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/characters",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "characters"
              ]
            },
            "description": "Create a new character"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has character data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.environment.set('character_id', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Character",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_url}}/characters/{{character_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "characters",
                "{{character_id}}"
              ]
            },
            "description": "Get specific character by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has character data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Character",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated John AI\",\n  \"description\": \"Updated professional AI character\",\n  \"voice_settings\": {\n    \"tone\": \"casual\",\n    \"speed\": \"slow\"\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/characters/{{character_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "characters",
                "{{character_id}}"
              ]
            },
            "description": "Update an existing character"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated character data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Character",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{api_url}}/characters/{{character_id}}",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "characters",
                "{{character_id}}"
              ]
            },
            "description": "Delete a character"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Character Image",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "image",
                  "type": "file",
                  "src": "character-image.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{api_url}}/characters/{{character_id}}/image",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "characters",
                "{{character_id}}",
                "image"
              ]
            },
            "description": "Update character image"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has image data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('image_url');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Generate Character Preview",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Hello, this is a preview of my voice\",\n  \"settings\": {\n    \"tone\": \"friendly\"\n  }\n}"
            },
            "url": {
              "raw": "{{api_url}}/characters/{{character_id}}/preview",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "characters",
                "{{character_id}}",
                "preview"
              ]
            },
            "description": "Generate character voice preview"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has preview data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('preview_url');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Train Character",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"training_data\": [\n    \"Sample text for training\",\n    \"Another training phrase\"\n  ],\n  \"training_type\": \"voice_clone\"\n}"
            },
            "url": {
              "raw": "{{api_url}}/characters/{{character_id}}/train",
              "host": [
                "{{api_url}}"
              ],
              "path": [
                "characters",
                "{{character_id}}",
                "train"
              ]
            },
            "description": "Train character with new data"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has training status\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('training_status');",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "AI character management and training endpoints",
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{auth_token}}",
            "type": "string"
          }
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "collection_id",
      "value": "syllaby-api-v1",
      "type": "string"
    },
    {
      "key": "date_created",
      "value": "2025-01-18",
      "type": "string"
    }
  ]
}